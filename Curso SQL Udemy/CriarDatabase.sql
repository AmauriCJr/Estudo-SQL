/* MODELAGEM FÍSICA DO BANCO DE DADOS CLIENTE */

CREATE DATABASE PROJETO;

/* CONECTANDO-SE AO BANCO*/

USE PROJETO;

/* CRIANDO A TABELA DE CLIENTES*/

CREATE TABLE CLIENTES (
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDEREÇO VARCHAR(100)

);

/* VERIFICANDO AS TABELAS DO CAMPO*/

SHOW TABLES; /* COMANDO SÓ EXISTE NO MYSQL*/

/* DESCOBRINDO COMO É A ESTRUTURA DE UMA TABELA */

DESC CLIENTES;

/* FORMAR DE INSERIR DADOS */

/* FORMA 1 */

INSERT INTO CLIENTES VALUES('JOAO','M','JOAO@GMAIL.COM',988638273,'22923110','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTES VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIACHUELO - CENTRO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTES VALUES('JORGE','M',NULL,885755896,'58748895','OSCAR CURY - BOM RETIRO - PATOS DE MINAS - MG');

/* FORMA 2*/

INSERT INTO CLIENTES(NOME,SEXO,ENDEREÇO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

/* FORMA 03 - SOMENTE MYSQL */

INSERT INTO CLIENTES VALUES('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
                          ('CARLA','F','CARLA@TERATI.COM.BR',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');
						  


/*SELEÇÃO PROJEÇÃO E JUNÇÃO */

/* PROJEÇÃO DE DADOS EM FORMA DE TABELA*/

SELECT NOW() AS DATA_HORA;

SELECT NOW() AS DATA_HORA, 'AMAURI' AS NOME;


SELECT NOME, SEXO, EMAIL FROM CLIENTES;

SELECT NOME AS CLIENTES, SEXO, EMAIL FROM CLIENTES;

SELECT NOME AS CLIENTES, SEXO, EMAIL, NOW() AS DATA_HORA FROM CLIENTES;

/* SELEÇÃO */

SELECT * FROM CLIENTES;

SELECT NOME, SEXO FROM CLIENTES
WHERE SEXO = 'M';

SELECT NOME, ENDEREÇO FROM CLIENTES
WHERE SEXO = 'F';

/* CARACTER CORINGA - %*/

SELECT NOME, SEXO FROM CLIENTES
WHERE ENDEREÇO LIKE '%RJ';

/* CONTA TODAS AS ESNTRADAS DO DATABASE */
SELECT COUNT(*) AS "QUANTIDADE DE REGISTROS" FROM CLIENTES;

/* CONTA AS OCORRÊNCIAS DE CADA TIPO EM UM DETERMINADA COLUNA*/
SELECT SEXO, COUNT(*) FROM CLIENTES
GROUP BY SEXO;

/*FILTRANDO VALORES NULOS */

SELECT NOME, SEXO, ENDEREÇO FROM CLIENTES
WHERE EMAIL IS NULL;

SELECT NOME, SEXO, ENDEREÇO FROM CLIENTES
WHERE EMAIL IS NOT NULL;

/* UPDATE DEVE SER USADO EM CONJUNTO COM O WHERE*/

SELECT NOME, EMAIL FROM CLIENTES
WHERE NOME = 'LILIAN';

UPDATE CLIENTES
SET EMAIL = 'lilian@hotmail.com'
WHERE NOME = 'LILIAN';

/* DELETE DEVE SER USADO COM O WHERE */

SELECT COUNT(*) AS "QUANTIDADE DE REGISTROS" FROM CLIENTES;

SELECT FROM CLIENTES -- CHECA ANTES
WHERE NOME = 'CARLA';

DELETE FROM CLIENTES -- DEPOIS APAGA
WHERE NOME = 'CARLA';

/* APAGA TABELA*/

DROP TABLE CLIENTES;

/*  SELEÇÃO, PROJEÇÃO E JUNÇÃO */

/* SELEÇÃO - TRAZER UM SUBCONJUNTO DE UM CONJUNTO TOTAL, EXTRAIR UMA TABELA DE DADOS DE UMA TABELA MAIOR
A CLAUSULA DE SELEÇÃO É O WHERE
*/

SELECT NOME, SEXO, ENDEREÇO /* PROJEÇÃO*/
FROM CLIENTES /* ORIGEM*/
WHERE EMAIL IS NULL; /* SELEÇÃO*/

/* JUNÇÃO - JOIN */

/* JUNTA DUAS TABELAS QUE POSSUEM CHAVE PRIMÁRIA E CHAVE ESTRANGEIRA EM COMUM */

/* ESSA FORMA ABAIXO NÃO É RECOMENDADA PARA FAZER JUNÇÃO POIS REALIZA OPERAÇÕES 
NÃO NECESSÁRIAS QUE PODEM APRESENTAR LENTIDÃO EM BANCOS GRANDES*/
SELECT NOME, SEXO, BAIRRO, CIDADE 
FROM CLIENTE, ENDERECO
WHERE IDCLIENTE = ID_CLIENTE;


/* A FORMA RECOMENDADA É A UTILIZANDO JOIN ABAIXO */
SELECT NOME, SEXO, BAIRRO, CIDADE /* PROJEÇÃO*/
FROM CLIENTE /* ORIGEM*/
INNER JOIN ENDERECO /* JUNÇÃO*/
ON IDCLIENTE = ID_CLIENTE
WHERE SEXO = 'F';/* SELEÇÃO*/


/* JOIN DUPLO */
SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE
INNER JOIN ENDERECO
ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
INNER JOIN TELEFONE
ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;

/* COM PONTEIRAMENTO 
COLOCAR COMO PRINCIPAL A TABELA QUE LIGA AS OUTRAS
*/

SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;


/* ALTER TABLE - ALTERAR NOME DA COLUNA*/

/* MUDA O NOME E O TIPO */
ALTER TABLE CLIENTES
CHANGE NOME NOMES VARCHAR(30);

/* MODIFY */
ALTER TABLE CLIENTES
MODIFY NOME VARCHAR(30) NOT NULL;

/* ADICIONAR COLUNAS - SEMPRE É COLOCADA NA ULTIMA POSIÇÃO SE NÃO FOR ESPECIFICADO*/

ALTER TABLE CLIENTES
ADD TIPO CHAR(1);

/* ADICIONAR CHAVE PRIMARIA - NÃO É POSSIVEL ADICIONAR O AUTOINCREMENTO 
QUANDO A PRIMARY KEY É ADICIONADA DESSA FORMA, SOMENTE QUANDO ADICIONADA 
NA CRIAÇÃO DA TABELA*/

ALTER TABLE CLIENTES
ADD PRIMARY KEY (TELEFONE);

/* ADICIONAR CHAVE EXTRANGEIRA */

ALTER TABLE CLIENTE
ADD FOREIGN KEY (TELEFONE)
REFERENCES CLIENTES(TELEFONE);

/* VERIFICAR CHAVES CRIADAS */
SHOW CREATE TABLE CLIENTES;

/* APAGANDO UMA COLUNA */

ALTER TABLE CLIENTES
DROP COLUMN TIPO;

/* ADICIONANDO COLUNA EM ORDEM ESPECIFICA */
ALTER TABLE CLIENTES
ADD COLUMN TIPO CHAR(1)
AFTER NOME;

ALTER TABLE CLIENTES
ADD COLUMN TIPO CHAR(1)
FIRST;

/* FUNÇÃO IFNULL*/

SELECT 	C.NOME, 
		IFNULL(C.EMAIL, 'NÃO POSSUI E-MAIL') AS 'E-MAIL', 
		E.ESTADO, 
		T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

/* VIEW - FUNCIONA COMO UMA FUNÇÃO DE OUTRAS LINGUAGENS*/

SELECT 	C.NOME, 
		C.SEXO, 
		C.EMAIL, 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

CREATE VIEW VIEW_RELATORIO AS 
SELECT 	C.NOME, 
		C.SEXO, 
		C.EMAIL, 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

SELECT * FROM VIEW_RELATORIO;

/* PARA TRABALHAR COM AS VIEWS CRIADAS */
SHOW TABLES; 

DROP VIEW VIEW_RELATORIO;

SELECT NOME, NUMERO, ESTADO
FROM VIEW_RELATORIO;

/* UPDATE, INSERT E DELETE - DML NA VIEW */

/* NÃO É POSSÍVEL INSERIR NEM DELETAR EM UMA VIEW COM JOIN MAS UPDATE É POSSÍVEL*/

UPDATE VIEW_RELATORIO SET NOME = 'GIOVANA' WHERE NOME = 'LORENA';

/* A MUDANÇA FEITA NO VIEW TAMBÉM É FEITA NA TABELA PRA QUAL ELA APONTA */

/* EM VIEWS SEM JOIN É POSSÍVEL FAZER AS OPERAÇÕES CITADAS ACIMA */

SELECT * FROM VIEW_RELATORIO
WHERE SEXO = 'F';

/* ORDER BY */

SELECT * FROM CLIENTE
ORDER BY NOME;

SELECT * FROM CLIENTE
ORDER BY 2;

/* ORDENANDO POR MAIS DE UMA COLUNA - ORDENA PRIMEIRAMENTE PELO PRIMEIRO ARGUMENTO, 
E CASO TENHA VALORES REPETIDOS ORDENA PELO SEGUNDO */

SELECT * FROM CLIENTE
ORDER BY NOME, CPF;

/* O COMANDO ABAIXO FALHA POIS NÃO EXISTEM COLUNAS SELECIONADAS O SUFICENTE, NÃO EXISTE COLUNA NUMERO 2 */

SELECT NOME FROM CLIENTE
ORDER BY 1, 2;

/* ORDEM ASCENDENTE OU DESCENDENTE */

SELECT * FROM CLIENTE
ORDER BY NOME ASC;

SELECT * FROM CLIENTE
ORDER BY NOME DESC;

SELECT * FROM CLIENTE
ORDER BY NOME DESC, CPF DESC;

/* ORDENANDO COM JOIN */

SELECT 	C.NOME, 
		C.SEXO, 
		C.EMAIL, 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
ORDER BY NOME;

SELECT * FROM VIEW_RELATORIO
ORDER BY NOME;

/* DELIMITADOR - COMO MUDAR */

/* MUDA O DELIMITADOR DE COMANDO DE ";" PARA "$" */
DELIMITER $

/* STORED PROCEDURES */

DELIMITER $
CREATE PROCEDURE NOME_EMPRESA()
BEGIN
	SELECT 'ACTA' AS EMPRESA;

END
$

/* CHAMANDO UMA PROCEDURE */

DELIMITER ;
CALL NOME_EMPRESA();

/* APAGAR PROCEDURE */

DROP PROCEDURE NOME_EMPRESA;

/* PROCEDURES COM PARAMETROS */

DELIMITER $
CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN
	SELECT NUMERO1 + NUMERO2 AS CONTA;

END
$

DELIMITER ;
CALL CONTA(100,50);


/* MAX - TRAZ O VALOR MAXIMO DE UMA COLUNA */

USE TESTE

SELECT MAX(VALOR_DO_LIVRO) AS MAIOR_PRECO
FROM LIVROS;

/* MIN - TRAZ O VALOR MINIMO DE UMA COLUNA */

SELECT MIN(VALOR_DO_LIVRO) AS MENOR_PRECO
FROM LIVROS;

/* AVG - TRAZ O VALOR MEDIO DE UMA COLUNA */

SELECT AVG(VALOR_DO_LIVRO) AS MEDIO_PRECO
FROM LIVROS;


/*TRUNCATE*/

SELECT 	TRUNCATE(MAX(VALOR_DO_LIVRO),2) AS MAIOR_PRECO,
		MIN(VALOR_DO_LIVRO) AS MENOR_PRECO,
		TRUNCATE(AVG(VALOR_DO_LIVRO),2) AS MEDIO_PRECO
FROM LIVROS;

/* SUM - SOMA OS VALORES DE UMA COLUNA */

SELECT SUM(VALOR_DO_LIVRO) AS SOMA
FROM LIVROS;

SELECT SEXO_DO_AUTOR, SUM(VALOR_DO_LIVRO) AS SOMA
FROM LIVROS
GROUP BY SEXO_DO_AUTOR;

/* SUBQUERIES */

SELECT NOME_DO_AUTOR, VALOR_DO_LIVRO FROM LIVROS
WHERE VALOR_DO_LIVRO = (SELECT MIN(VALOR_DO_LIVRO) FROM LIVROS);

SELECT NOME_DO_AUTOR, VALOR_DO_LIVRO FROM LIVROS
WHERE VALOR_DO_LIVRO > (SELECT AVG(VALOR_DO_LIVRO) FROM LIVROS);

/* OPERAÇÕES COM AS LINHAS */

SELECT NOME_DO_AUTOR, NUMERO_DE_PAGINAS, VALOR_DO_LIVRO, (NUMERO_DE_PAGINAS + VALOR_DO_LIVRO) AS TESTE_DE_SOMA_DE_LINHA
FROM LIVROS;


/* ADICIONANDO PRIMARY KEY DA FORMA CERTA*/
CREATE TABLE CLIENTE1(
	IDCLIENTE INT,
	NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE1(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT
);
	

ALTER TABLE CLIENTE1 ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY (IDCLIENTE);

ALTER TABLE TELEFONE1 ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE1(IDCLIENTE);

SHOW CREATE TABLE TELEFONE1;

/* DICIONARIO DE DADOS */

SHOW DATABASES;

USE INFORMATION_SCHEMA;

SHOW TABLES;

DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO",
		TABLE_NAME AS "TABELA",
		CONSTRAINT_NAME AS "NOME REGRA",
		CONSTRAINT_TYPE AS "TIPO"
		FROM TABLE_CONSTRAINTS
		WHERE CONSTRAINT_SCHEMA = "COMERCIO";
		
/* APAGANDO CONSTRAINTS */

USE COMERCIO;

ALTER TABLE TELEFONE
DROP FOREIGN KEY TELEFONE_IBFK_1;
